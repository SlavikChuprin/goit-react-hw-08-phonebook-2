{"version":3,"file":"static/js/196.3e9a8059.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook-2/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://goit-react-hw-08-phonebook-2/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.js","webpack://goit-react-hw-08-phonebook-2/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook-2/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","components/Contacts/Contacts.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"filterWrapper\":\"Filter_filterWrapper__ohvAm\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import React from 'react';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors } from '../../redux/contacts';\nimport { filterContact } from '../../redux/contacts';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilter);\n\n  // if (!isLoading && !contacts.length) {\n  //   return <p>Your phonebook is empty. Please add contact.</p>;\n  // }\n  return (\n    <div className={s.filterWrapper}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={event => dispatch(filterContact(event.target.value))}\n          className={s.filterInput}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactListItem_contactItem__g+7xP\",\"btnDel\":\"ContactListItem_btnDel__DlaCH\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactListItem.module.css';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport { useDispatch } from 'react-redux';\nimport Loader from 'react-loader-spinner';\nimport { useSelector } from 'react-redux';\n\nconst ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(contactsSelectors.getLoading);\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n  return (\n    <li className={s.contactItem}>\n      {contact.name}: {contact.number}\n      <button\n        type=\"button\"\n        className={s.btnDel}\n        disabled={isLoading}\n        onClick={() => onDeleteContact(contact.id)}\n      >\n        {isLoading ? (\n          <Loader\n            type=\"Circles\"\n            color=\"lightblue\"\n            height={12}\n            width={12}\n            timeout={0}\n          />\n        ) : (\n          'Delete'\n        )}\n      </button>\n    </li>\n  );\n};\n\nContactListItem.prototype = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onDeleteContact: PropTypes.func.isRequired,\n};\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ContactListItem from '../ContactListItem';\nimport s from './ContactList.module.css';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\nimport Loader from 'react-loader-spinner';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const isLoading = useSelector(contactsSelectors.getLoading);\n\n  return (\n    <ul className={s.contactList}>\n      {isLoading && <Loader type=\"Circles\" color=\"lightblue\" />}\n      {contacts &&\n        contacts.map(contact => (\n          <ContactListItem key={contact.id} contact={contact} />\n        ))}\n    </ul>\n  );\n};\n\nContactList.prototype = {\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import s from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors } from '../../redux/contacts';\nimport { contactsOperations } from '../../redux/contacts';\nimport Loader from 'react-loader-spinner';\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(contactsSelectors.getAllContacts);\n  const isLoading = useSelector(contactsSelectors.getLoading);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())\n      ? alert(`${name} is already in contacts`)\n      : dispatch(contactsOperations.addContact(name, number));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={s.btn} disabled={isLoading}>\n        {isLoading ? (\n          <Loader type=\"Circles\" color=\"lightblue\" height={20} width={100} />\n        ) : (\n          'Add contact'\n        )}\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import Filter from '../Filter';\nimport ContactList from '../ContactList';\nimport ContactForm from '../ContactForm';\n\nfunction Contacts() {\n  return (\n    <div className=\"App\">\n      <div className=\"Contacts\">\n        <h1>PHONEBOOK</h1>\n        <ContactForm />\n        <h2> CONTACTS</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n}\n\nexport default Contacts;\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["dispatch","useDispatch","filter","useSelector","contactsSelectors","className","s","type","value","onChange","event","filterContact","target","ContactListItem","contact","isLoading","name","number","disabled","onClick","id","contactsOperations","color","height","width","timeout","prototype","PropTypes","onDeleteContact","ContactList","useEffect","contacts","map","visibleContacts","useState","setName","setNumber","handleChange","e","reset","onSubmit","preventDefault","some","toLowerCase","alert","pattern","title","required","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}